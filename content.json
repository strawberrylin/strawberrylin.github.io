[{"title":"Hello World","date":"2080-12-30T16:00:00.000Z","path":"2080/12/31/start/","text":"Welcom to strawberylin’s home. This is my very first post. If you find any problems or trouble you can find me on GitHub. Review 2014年，进入大学，开始有关计算机科学的学习，出于兴趣，2015年开始搭建个人博客。开始是借助github,后来了解到Hexo,但是每次都是玩一玩，没有花时间去管理和更新，导致之前的博客内容琐碎杂乱。 大学时光已近3/4，说到收获却无从说起，似乎什么收获都没有．于是决定培养一个写博客的习惯，将学到的一点一点收起来,同时将前面的blog重新整理和更新． Sum水滴石穿","tags":[{"name":"随笔","slug":"随笔","permalink":"http://wlins.me/tags/随笔/"},{"name":"hexo","slug":"hexo","permalink":"http://wlins.me/tags/hexo/"}]},{"title":"ME.WLINS.UTIL &nbsp; &nbsp; java package document","date":"2018-01-05T16:00:00.000Z","path":"2018/01/06/me.wlins.util.md/","text":"A personal code repository for java, concret introduction as follows: Print print(); 输出换行 print(obj); 输出然后换行 printnb(obj);输出然后不换行 printf(format,args);Ｃ语言的printf函数 usage : import static me.wlins.util.Print.*; Range range(n); 产生０～n-1 的数组序列 range(start,end);产生start~-end-1的数组序列 range(start,end,step);产生start~end-1,间隔为step的数组序列 usage : import static me.wlins.util.Range.*; MyStack push(); 进栈 pop(); 出栈 peek(); 取栈首元素 empty();判断是否为空栈 usage: Stack stack = new Stack(); //T为初始化类型参数 Hex将二进制文件转化为十六进制输出 format(byte[] data) 静态方法，返回一个十六进制字符串 usage:\\ import me.wlins.util.Hex;\\Hex.format(data); Tuple创建元组，包括二维，三维，四维，五维元组类：TwoTuple, ThreeTuple, FourTuple, FiveTuple usage: 返回多个对象，存在一个元组 \\return new FourTuple(new class1(), new class2(), new class3(), new class4()); PPrint一个灵巧的打印机，一个可以添加新行并且缩排所有元素的工具 String pformat(Collection&lt;?&gt; c); 格式化 void pprint(Collection&lt;?&gt; c); 打印 void pprint(Object[] c); 打印 usage:\\得到一个重排的字符串：PPrint.pformat(list);打印：PPrint.pprint(list); Directory产生由本地文件构成的对象数组，或者产生由给定目录下的有整个目录树中所有文件构成的List\\ File[] local(path, regex); walk();参数文件起始路径和正则表达式 usage:\\Example: System.out.println(PPrint.walk(“.”); BinaryFile打开二进制文件，并返回一个byte[] read(File bfile); 打开二进制文件 read(String bfile); 打开二进制文件 usage:\\BinaryFile.read(“filename”);\\BinaryFile.read(new File(filePath); TextFile读写文件，对文件进行分割 read(filename); 读取文件保存到字符串 write(aimfile,source); 将源写入目的文件 构造器TextFile(filename, regex);Textfile(filename);有规则就按照规则分割，没有规则默认换行符 usage;\\TextFile.read(“test.java”)’\\TextFile.write(“test1.java”, file);\\TreeSet\\ words = new TextFile(filename, “\\W+);","tags":[{"name":"随笔","slug":"随笔","permalink":"http://wlins.me/tags/随笔/"},{"name":"java - doc - introduction","slug":"java-doc-introduction","permalink":"http://wlins.me/tags/java-doc-introduction/"}]},{"title":"Alien War","date":"2017-12-29T16:00:00.000Z","path":"2017/12/30/alien_war/","text":"Project Aim IntroductionI want to lenarn the Python by myself. After I read the &lt;&lt; Python Crash course A hands-on ,Project-based Introduction to Programming &gt;&gt;, I want to strengthen my skill by the project.Click here to visit my Github repository Project Background IntroductionAfter I read the &lt;&lt; Python Crash course A hands-on , Project-based Introduction to Programming &gt;&gt;, there is a project in the book named Alien War, a 2-dimension game written with python using pygame. A suitable project that will help me to master the language, I think.So I spend one hour every day to write the source code in the direction of the book, wantting to master the language better and increase the experience in prgramming through the project. Project Design IntroductionFunction Description :A space ship will stay at the bottom of the screen, only allowed to move rightwards or leftwards which is in the contorl of the payers. A group of aliens will move downwards from the top of the screen, moving rightwards or leftwards. Players are allowed to shot at the aliens. When bullets hit the alien, the alien will be killed and disappear from the screen. After killing all the aliens, there will come another group of aliens. Player will attain the score after every kill and level up while the alens be cleaned every time. If there is an alien hit the space or the bottom of the screen, Players will lose a space ship. Every player has three space ships. Game will over when there is no ship remains. The frequence of the aliens will increase with the level upping and the point of every kill will also increase. Players are requested to get as higher score as they can by their efforts. Module:alien_invasion:The entrance of the game, call other modules. Initialize the game and build the initial run environment of the game.setting:The whole setings of the game, include ship, aliens, bullets, screen, speed, points.game_function:This module includes many functions run in the game to deal with many events. Such as keyboard down events, update events, create events, hit events, calculate events.alien:This module is about the description of the alien.ship:This module is about the dsescripton of the ship.bullet:This module is about the description of the bullet.button:This module is about the description of the button, to create a button of starting game.game_state:To manage the state of the game.score_board:This module will show the score atthe screen. Project Implement Introductionalien_invasion: Import modules: settings, ship, game_states, button, scoreboard. The entrance of the game, there is only one function named as run_game(). Initialize the game and create the screen through pygame. Then create the button, score_board, ship, aliens, bullets, game_states instance. After that, there is a loop can only be ended by the exit() function. Check the keyboard down events, update the alien, ship, bullet and the screen.source code:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#!/usr/bin/env python# coding=utf-8import sysimport pygamefrom settings import Settingsfrom ship import Shipfrom pygame.sprite import Groupfrom game_states import Game_statesfrom button import Buttonfrom scoreboard import Scoreboardimport game_functions as gamefdef run_game(): # initialize the game and build a screen object pygame.init() ai_settings = Settings() screen = pygame.display.set_mode((ai_settings.screen_width,ai_settings.screen_height)) pygame.display.set_caption(\"Alien War\") # create a button play_button = Button(ai_settings, screen, \"Play\") # create a intence of Game_states games = Game_states(ai_settings) # create the score board score_board = Scoreboard(ai_settings, screen, games) # set the background screen.fill(ai_settings.bg_color) # create a ship ship = Ship(ai_settings,screen) # create a group to store the bullets bullets = Group() # create a group to store te aliens aliens = Group() if games.game_active == 1: gamef.create_fleet(ai_settings,screen,ship,aliens) # start the main loop while True: # watch the mouse and keyboard gamef.check_events(ai_settings,screen,games,score_board,play_button,ship,aliens,bullets) if games.game_active == 1: # update the locating ship.update() # update the bullets gamef.update_bullet(ai_settings,screen,games,score_board,ship,aliens,bullets) # update the aliens gamef.update_alien(ai_settings,games,screen,score_board,ship,aliens,bullets) # update the screen gamef.update_screen(ai_settings,screen,games,score_board,ship,aliens,bullets,play_button) run_game() game_function: Define a largr of functions in the game. The function manu is as follows: check_keydown_events(event,ai_settings,screen,ship,bullets): deal with keydown eventcheck_keyup_events(event,ship): deal with keyupcheck_events(ai_settings,screen,states,score_board,play_button,ship,aliens,bullets): react to the mouse and keyboardupdate_screen(ai_settings,screen,states,score_board,ship,aliens,bullets,play_button): update the screenupdate_bullet(ai_settings,screen,states,score_board,ship,aliens,bullets): update the bullet and delete the old bulletsupdate_alien(ai_settings,states,screen,score_board,ship,aliens,bullets): check the site of the alien and update the site of the every alienget_number_aliens_x(ai_settings,alien_width): calculate how many a line a line can containget_number_rows(ai_settings,ship_height,alien_height): calculate how many aliens the screen can containcreate_alien(ai_settings,screen,aliens,alien_number,alien_rows): create an aliencreate_fleet(ai_settings,screen,ship,aliens): create the group of the alienscheck_fleet_edges(ai_settings,aliens): what if the aliens hit the edgeschange_fleet_direction(ai_settings,aliens): change the direction of the aliencheck_collide_bullet_alien(ai_settings,screen,states,score_board,ship,aliens,bullets): react to the hit between aliens and bulletsship_hit(ai_settings,states,screen,score_board,ship,aliens,bullets): react to the hit between ship and alienscheck_aliens_bottom(ai_settings,states,screen,score_board,ship,aliens,bullets): check if aliens arrive at the bottom of te screencheck_play_button(ai_settings,screen,states,score_board,play_button,ship,aliens,bullets,mouse_x,mouse_y): start the ame when click at the buttoncheck_highest_score(states, score_board): check if there is new score and update the score setting: Define the variable in the game and initialize the game, include: screen, bullet, alien, ship, speed.alien: Extends from Sprite, Initialize the alien and define the behavor of the alien: update, check edges.ship: Extends from Sprte, initialize the ship and define the behavor of the ship: update.bullet: Extends fom Sprite, initialize the bullet and define the behavor of the bullet: update, draw_rect.button: Define a button, render the “play” to an image and draw the button.game_state: Initialize the game’s state, add the reset behavor.score_board: Initialize the score board, render the score, level, highest score to an image and dislay the elft ship at he score. Project SummaryI spend one hour every dey almost half the month to write the project in the direction of the book, there are almost the whole source code in the book. I just fix some problems where I think exist some question in the logic. And I also add a start page to beauty the game. Above all, my skill in python has been promoted through the project.","tags":[{"name":"随笔","slug":"随笔","permalink":"http://wlins.me/tags/随笔/"},{"name":"python - game","slug":"python-game","permalink":"http://wlins.me/tags/python-game/"}]},{"title":"Machine-Learning-Caffe","date":"2017-07-04T16:00:00.000Z","path":"2017/07/05/caffe-learn/","text":"Caffe是一个深度学习的框架，主要用于神经网络深度学习 Caffe模型 Layers Layer是Caffe模型和计算的基本单元，一系列layer和其他连接的集合组成了Net 每一个Layer都定义了三种运算 setup 在模型初始化时重置layer及其相互的连接 forword 从Bottom层中接收Blob数据，进行计算后输出送入到top层中 backword 给定相对于top层输出的梯度，计算其相对于输入的梯度，并传递到Bottom层 Blobs Caffe使用Blobs结构來存储,交换,处理网络中的数据和导数信息，Blob是标准的数组结构 Nets Caffe基于自己的模型，通过逐层定义Layer的方式定义整个网络，网络从数据输入层到损失层自下向上的定义整个模型 Net::Init() 进行模型的初始化，创建Blobs和Layers，搭建整个无向图，调用layer的Setup函数 前传与后传 前传 Caffe组合每一层的计算以得到整个模型的计算函数 Layer::Forward() 实现每一层的前传 Net::Forward() 实现网络的前传 后传 Caffe反向组合每一层的梯度來计算整个网络的梯度 Layer::Backward() 实现每一层的后传 Net::Backward() 实现网络的后传 Loss学习的目的是找到一个网络权重的集合，使得损失函数最小损失通过网络的前向计算得到，某些层的输出可以作为损失函数 SolverSolver通过协调Net的前向推断计算和反向梯度计算来对参数进行更新,从而达到减小loss的目的","tags":[{"name":"随笔","slug":"随笔","permalink":"http://wlins.me/tags/随笔/"},{"name":"ml-caffe","slug":"ml-caffe","permalink":"http://wlins.me/tags/ml-caffe/"}]},{"title":"Machine-Learning-KNN","date":"2017-07-03T16:00:00.000Z","path":"2017/07/04/knn/","text":"KNN算法KNN算法用来解决分类问题，它是属于基于实例的学习，每一次学习都是根据实例，也属于懒惰学习，处理训练集时没有创建模型，后面根据实例的对比才来归类 为了判断未知实例的类别，通过与他最近的已知实例的类别來对这个未知实例进行分类 选择一个参数K，K是选择已知实例的数目，使预测具有最高的精确度 计算未知实例和所有已知实例的距离 选择最近K个已知实例 选取最邻样本中最多数的类别作为这个实例的类别 KNN算法应用在python库中有iris的数据集，可以直接加载，并且使用数据集分为两部分，第一部分是每一个实例的特征值，有4项，第二部分是实例的标记 1234567891011121314from sklearn import neighborsfrom sklearn import datasetsknn = neighbors.KNeighborsClassifier()iris = datasets.load_iris()print irisknn.fit(iris.data, iris.target)predictedLabel = knn.predict([[0.1, 0.2, 0.3, 0.4]])print (\"predictedLabel is :\" + predictedLabel)print predictedLabel 对于未知实例[0.1,0.2,0.3,0.4]，预测的结果为属于[0]","tags":[{"name":"随笔","slug":"随笔","permalink":"http://wlins.me/tags/随笔/"},{"name":"ml - knn","slug":"ml-knn","permalink":"http://wlins.me/tags/ml-knn/"}]},{"title":"Machine-Learning-DecisionTree","date":"2017-07-02T16:00:00.000Z","path":"2017/07/03/decisiontree/","text":"Decision Tree决策树算法属于监督学习，决策树是一个类似一流程图的树型结构，每个内部结点表示在一个属性上的测试，每个分支代表一个属性输出，每个树叶结点代表类或者类分布，树的最顶层是根结点。 每个结点进行一个属性的检测 每个分支代表属性的一个可能取值，分支到不同结点 每个结点有关于类别的分布 构造决策树的算法熵(entropy)对于不确定的事件，通过信息量來度量，越不确定一件事，需要的信息量越大 熵计算公式如下: 决策树归纳算法(ID3)构造决策树时怎么选择结点，用于选择属性判断结点。通过变量值信息获取量(Information Gain)來判断，一个属性的信息获取量计算：Gain(A) = Info(D) - Info_A(D)即没有A时的信息量减去加上A之后的信息量，差值作为判断标准(D是数据集,A是属性)，步骤如下： 1 计算事件总的熵 2 针对每一个属性进行划分，然后计算划分的每一个熵 3 利用信息量获取计算公式计算出每个属性的信息获取量 4 选择最大的信息量的结点 5 剩下的节点进行重复计算","tags":[{"name":"随笔","slug":"随笔","permalink":"http://wlins.me/tags/随笔/"},{"name":"ml - decisiontree","slug":"ml-decisiontree","permalink":"http://wlins.me/tags/ml-decisiontree/"}]},{"title":"Machine-Learning-BaseConception","date":"2017-06-29T16:00:00.000Z","path":"2017/06/30/concept_day1/","text":"本文主要介绍一些浅显的机器学习的基本概念 概念学习 从某个有关布尔函数的输入和输出训练样例中该推断出该布尔函数 实例与集合 实例是一个样例，所有的实例构成一个集合 目标概念 待学习的函数或者目标概念 训练集 训练样例，用来进行训练，也就是产生模型或者算法的数据集 测试集 测试样例，用来专门进行测试已经学习好的模型或者算法的数据集 特征向量 属性的集合，通常用一个向量来表示，附属于一个实例 标记 实例类别的标记，学习的答案，结果的可能值的集合 分类与回归 分类: 目标标记为类别型数据回归: 目标标记为连续型数据 监督学习 有监督学习: 训练集有类别标记无监督学习: 训练集无类别标记半监督学习: 有类别标记的训练集+无标记的训练集 机器学习步骤与框架 把数据拆分为训练集和测试集 用训练集和训练集的特征向量來训练算法 把学习來的算法运用在测试集上评估算法 end有关机器学习的一些基本概念介绍完毕，有什么问题可以联系我Blog or Github.","tags":[{"name":"随笔","slug":"随笔","permalink":"http://wlins.me/tags/随笔/"},{"name":"ml - conception","slug":"ml-conception","permalink":"http://wlins.me/tags/ml-conception/"}]},{"title":"Hexo-Github-Blog","date":"2017-03-12T16:00:00.000Z","path":"2017/03/13/blog/","text":"本次博客是借助Hexo + Github搭建，需要用到Nodejs和npm，主机系统是Ubuntu 16.04 LTS。 preparationNodejs &amp; npm 安装Nodejs &amp; npm，用于生成静态页面和安装插件，Nodejs必须是6.x版本 Github首先安装git工具1sudo apt-get install git 部署时需要通过git工具将本地文件提交到远程github仓库 然后到Github官网注册github帐号，在github官网创建仓库，仓库名必须为”your_id”.github.io,(将引号内容替换为你的github名） Hexo在本地创建一个文件夹，进入本文件夹，安装Hexo1sudo npm install -g Hexo procedureblog工程初始化安装1hexo init 操作完成后，文件夹下会生成配置文件生成静态界面1hexo generate 操作完成后，会根据前阶段的文件生成静态页面文件与github关联修改文件夹下的_config.yml文件，在文件尾，修改对应配置1234deploy: type: git repo: https://github.com/your_github_id/your_github_id.github.io.git branch: master 注意，每个冒号后面有一个空格，语法要求，否则报错部署1hexo deploy 需要输入github的账号和密码在浏览器输入地址 https://github.com/your_github_id/your_github_id.io即可访问hex Hello World页面，至此，个人博客搭建成功。 inclusion增加文章blog文章用markdown语法写，保存为md文件，放在/source/_posts路径下即可,然后部署即可123hexo cleanhexo ghexo d 每次部署使用这三条命令 修改主题hexo 的主题放在/theme路径下，在网上找到对应的hexo主题包，放在这个路径下，然后修改_config.yml文件。在__config.yml文件中，有一个theme的配置项，改为你自己的主题名即可1theme: your_theme_name 本地调试在执行完hexo generate命令后，可以进行本地调试，预览blog效果123hexo cleanhexo ghexo server 然后在浏览器地址栏输入localhost:4000,即可预览 Nodejs安装6.x版本问题我在安装Nodejs的过程中，遇到一个问题，我安装的是6.x版本，但实际上装得是4.x版本，通过node -v查看版本，发现版本不对，花了很久才找到解决方法安装Nodejs方法网上很多教程，但是我发现我按装时选择的是最新版本，可实际安装的却是4.2.6版本，解决方法如下： 新建一个文件:/etc/apt/sources.list.d/nodesource.list(需要权限),文件中写入下面两行： 12deb https://deb.nodesource.com/node_6.x xenial maindeb-src https://deb.nodesource.com/node_6.x xenial main 下载GPG Signing Key 1curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo apt-key add - update 1sudo apt-get update 检查apt-cache 1apt-cache policy nodejs 结果应该显示node的新版本，如果没有，则出错，检查前面的步骤 安装nodejs1sudo apt-get install nodejs 查看nodejs 版本1node -v 我经过上面的步骤后成功安装nodejs 6.0版本。 end至此，一个简单的个人博客应该搭建完成，有什么问题可以联系我Blog or Github.","tags":[{"name":"随笔","slug":"随笔","permalink":"http://wlins.me/tags/随笔/"},{"name":"hexo","slug":"hexo","permalink":"http://wlins.me/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://wlins.me/tags/github/"},{"name":"linux","slug":"linux","permalink":"http://wlins.me/tags/linux/"}]}]